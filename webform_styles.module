<?php

/**
 * @file
 * A.
 */

/**
 * Implements hook_node_load().
 */
function webform_styles_node_load($nodes, $types) {
  // Iterate the node list.
  foreach ($nodes as $key => $node) {
    $results = db_select('webform_component')
      ->fields('webform_component', array('webform_styles', 'cid'))
      ->condition('nid', $node->nid, '=')
      ->execute();

    $styles = array();
    while ($record = $results->fetchAssoc()) {
      $styles[$record['cid']] = $record['webform_styles'];
      $node->webform_styles = unserialize($record['webform_styles']);
    }
  }
}

/**
 * Implements hook_webform_component_render_alter().
 */
function webform_styles_webform_component_render_alter(&$element, &$component) {
  if ($component['webform_styles']) {

    // Create string from array, with styles separated by a semi-colon.
    $styles = implode('; ', array_map(
        function ($v, $k) {
          return sprintf("%s:%s", $k, $v);
        },
        unserialize($component['webform_styles']),
        array_keys(unserialize($component['webform_styles']))
    ));

    // Create the style array attribute if it doesn't exists.
    if (!isset($element['#attributes']['style'])) {
      $element['#attributes']['style'][] = array();
    }
    //$element['#attributes']['style'] = $component['webform_styles'];
    $element['#attributes']['style'] = $styles;
  }

  if($component['webform_slide'] == 1) {
    echo "a";
  }
  
}

/**
 * Implements hook_form_webform_component_edit_form_alter().
 */
function webform_styles_form_webform_component_edit_form_alter(&$form, $component) {

  $nid = $form['nid']['#value'];
  $cid = $form['cid']['#value'];
  if ($cid == NULL) {
    $cid = 0;
  }

  // Fetch the class(es) of requested component.
  $webform_style = db_query("SELECT webform_styles FROM {webform_component} WHERE nid = :nid AND cid = :cid", array(':nid' => (int) $nid, ':cid' => (int) $cid))->fetchField();
  $styles = unserialize($webform_style);

  $form['webform_styles'] = array(
    '#type' => 'fieldset',
    '#title' => t('Inline styles'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#weight' => 5,
    'font-family' => array(
      '#type' => 'textfield',
      '#title' => t('Font Family'),
      '#description' => t('Specify font family to be used on the form field'),
      '#size' => 50,
      '#maxlength' => 255,
      '#weight' => 2,
      "#default_value" => isset($styles['font-family']) ? $styles['font-family'] : '',
    ),
    'font-size' => array(
      '#type' => 'textfield',
      '#title' => t('Font Size'),
      '#postfix' => t('px'),
      '#description' => t('Specify font size to be used on the form field'),
      '#size' => 5,
      '#maxlength' => 5,
      '#weight' => 3,
      "#default_value" => isset($styles['font-size']) ? $styles['font-size'] : '',
    ),
    'color' => array(
      '#type' => 'textfield',
      '#title' => t('Color'),
      '#description' => t('Specify color to be used on the form field'),
      '#size' => 10,
      '#maxlength' => 20,
      '#weight' => 4,
      "#default_value" => isset($styles['color']) ? $styles['color'] : '',
    ),
  );


  if (module_exists('options_element')) {
    $webform_slide = db_query("SELECT webform_slide FROM {webform_component} WHERE nid = :nid AND cid = :cid", array(':nid' => (int) $nid, ':cid' => (int) $cid))->fetchField();
    $form['display']['slider'] = array(
      '#type' => 'checkbox',
      '#title' => t('Slider'),
      '#default_value' => $webform_slide,
      '#description' => t('Check this option if the option combo should be show as a slider.'),
      '#weight' => 0,
    );
  }
}

/**
 * Implements webform_component_update().
 */
function webform_styles_webform_component_update($component) {

  $style = array();

  if (isset($component['webform_styles']['font-family'])) {
    $style["font-family"] = $component['webform_styles']['font-family'];
  }
  if (isset($component['webform_styles']['font-size'])) {
    $style["font-size"] = $component['webform_styles']['font-size'];
  }
  if (isset($component['webform_styles']['color'])) {
    $style["color"] = $component['webform_styles']['color'];
  }

  $slider = 0;
  if (isset($component['display']['slider'])) {
    $slider = $component['display']['slider'];
  }

  $result = db_update('webform_component')
    ->fields(array(
      'webform_styles' => serialize($style),
      'webform_slide' => $slider,
    ))
    ->condition('nid', (int) $component['nid'], '=')
    ->condition('cid', (int) $component['cid'], '=')
    ->execute();

}

/**
 * Implements webform_component_insert().
 */
function webform_styles_webform_component_insert($component) {
  webform_styles_webform_component_update($component);
}
